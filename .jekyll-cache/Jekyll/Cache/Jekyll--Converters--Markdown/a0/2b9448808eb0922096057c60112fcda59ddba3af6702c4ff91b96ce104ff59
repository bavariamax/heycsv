I"è<p><button onclick="onBtnDemo()">Try Demo</button>
<button onclick="onBtnReset()">Reset</button></p>

<div id="picker" style="height: 400px;"></div>

<script src="//static.filestackapi.com/filestack-js/3.x.x/filestack.min.js"></script>

<script type="text/javascript" charset="utf-8">

function onBtnDemo() {
  createGrid("https://www.heycsv.com/downloads/sample-csv/1k-sample-companies.csv");
}

function onBtnReset() {
  document.querySelector("#picker").style.display = "block";
  gridOptions.api.destroy();
  document.querySelector("#csvGrid").style.display = "none";
}

const client = filestack.init("AaZv0uyTZmBD0H4g9mWbAz");



const options = {
	displayMode: "dropPane",
	container: "picker",
    onFileSelected: file => {
        // If you throw any error in this function it will reject the file selection.
        // The error message will be displayed to the user as an alert.
        if (file.size > 100000 * 1000) {
            throw new Error('File too big, select something smaller than 1MB');
        }
    },
    fromSources: ["local_file_system", "url"],
    accept: ["text/*"],
    customText: {
    	'Select Files to Upload': 'Select CSV File to Upload',
    	'Drag and Drop, Copy and Paste Files': 'Drag and Drop CSV File to Upload or Click and Select'
    },
    onFileUploadFinished: file => {	
    	createGrid(file.url);
    }
};

client.picker(options).open();
</script>

<div id="csvGrid" style="height: 1000px; width: 100%; display: none;" class="ag-theme-alpine"></div>

<script type="text/javascript" charset="utf-8">

 	  var gridOptions;

      function createGrid(url){ 

      	document.querySelector("#picker").style.display = "none";
      	document.querySelector("#csvGrid").style.display = "block";

	      gridOptions = {
	        statusBar: {
	          statusPanels: [
	            {
	              statusPanel: "agTotalAndFilteredRowCountComponent",
	              key: "totalAndFilter",
	              align: "left"
	            },
	            { statusPanel: "agSelectedRowCountComponent", align: "left" },
	            { statusPanel: "agAggregationComponent", align: "right" }
	          ]
	        },
	        defaultColDef: {
	          minWidth: 50,
	          sortable: true,
	          filter: true,
	          resizable: true,
	          editable: true,
	          enableRowGroup: true,
	          enableValue: true,
	          enablePivot: true
	        },
	        rowSelection: "multiple",
	        singleClickEdit: false,
	        enableCellChangeFlash: true,
	        enableFillHandle: true,
	        debug: true,
	        enableRangeSelection: true,
	        rowDragManaged: true,
	        enableMultiRowDragging: true,
	        rowSelection: "multiple",
	        animateRows: true,
	        groupUseEntireRow: true,
	        suppressDragLeaveHidesColumns: true,
	        suppressMakeColumnVisibleAfterUnGroup: true,
	        rowGroupPanelShow: "always",
	        sideBar: {
          		toolPanels: ["columns", "filters"]
        	}
	     };

	      // lookup the container we want the Grid to use
	      const eGridDiv = document.querySelector("#csvGrid");

	      // create the grid passing in the div to use together with the columns & data we want to use
	      new agGrid.Grid(eGridDiv, gridOptions);



	      // import csv
	      const Http = new XMLHttpRequest();
	      Http.open("GET", url);
	      Http.send();

	      Http.onreadystatechange = (e) => {
	        console.log("csv file load success");
	        csv = Http.responseText;

	        // csv prep
	        var delimiter = ",";
	        var lines = csv.split("\n");

	        // create header row
	        var headers = lines[0].split(delimiter);
	        var colDefs = createCols(headers);
	        gridOptions.api.setColumnDefs(colDefs);
	        console.log(headers);

	        // create rows
	        var rowData = JSON.parse(csvJSON(lines, delimiter));
	        gridOptions.api.setRowData(rowData);

	      };

      }

      function createCols(headers) {
        console.log("createCols");

        var colCount = headers.length;
        var columns = [];

        for (var col = 0; col < colCount; col++) {
          if (col == 0) {
            var colDef = { field: headers[col], rowDrag: true };
          } else {
            var colDef = { field: headers[col] };
          }
          columns.push(colDef);
        }

        return columns;
      }

      function csvJSON(lines, delimiter) {
        console.log("csvJSON");

        var result = [];
        var headers = lines[0].split(delimiter);

        for (var i = 1; i < lines.length; i++) {
          var obj = {};
          var currentline = lines[i].split(delimiter);

          for (var j = 0; j < headers.length; j++) {
            obj[headers[j]] = currentline[j];
          }

          result.push(obj);
        }

        //return result; //JavaScript object
        return JSON.stringify(result); //JSON
      }


      function CSVToArray( strData, strDelimiter ){
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        strDelimiter = (strDelimiter || ",");

        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp(
            (
                // Delimiters.
                "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

                // Quoted fields.
                "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

                // Standard fields.
                "([^\"\\" + strDelimiter + "\\r\\n]*))"
            ),
            "gi"
            );


        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [[]];

        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;


        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while (arrMatches = objPattern.exec( strData )){

            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[ 1 ];

            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (
                strMatchedDelimiter.length &&
                strMatchedDelimiter !== strDelimiter
                ){

                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push( [] );

            }

            var strMatchedValue;

            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            if (arrMatches[ 2 ]){

                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[ 2 ].replace(
                    new RegExp( "\"\"", "g" ),
                    "\""
                    );

            } else {

                // We found a non-quoted value.
                strMatchedValue = arrMatches[ 3 ];

            }


            // Now that we have our value string, let's add
            // it to the data array.
            arrData[ arrData.length - 1 ].push( strMatchedValue );
        }

        // Return the parsed data.
        //return( arrData );
        return JSON.stringify(arrData); //JSON
    }


    </script>

:ET